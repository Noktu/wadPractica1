/*
 * This java source file is generated by DAO4J v1.19
 * Generated on Tue Sep 16 16:53:36 CDT 2014
 * For more information, please contact b-i-d@163.com
 * Please check http://sourceforge.net/projects/dao4j/ for the latest version.
 */

package com.escom.wad.prac1.dao.imp;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.SQLException;
import java.sql.Types;
import java.util.List;
import java.util.ArrayList;
import com.escom.wad.prac1.dto.Carrera;
import com.escom.wad.prac1.dto.CarreraKey;
import com.escom.wad.prac1.dao.CarreraDAO;

/**
 * This class provides methods to populate DB Table of carrera
 */
public class CarreraDAOImpl implements CarreraDAO {
    /* SQL to insert data */
    private static final String SQL_INSERT =
        "INSERT INTO carrera ("
        + "idcarrera, nombreCarrera, duracion"
        + ") VALUES (?, ?, ?)";

    /* SQL to select data */
    private static final String SQL_SELECT =
        "SELECT "
        + "idcarrera, nombreCarrera, duracion "
        + "FROM carrera WHERE "
        + "idcarrera = ?";

    /* SQL to update data */
    private static final String SQL_UPDATE =
        "UPDATE carrera SET "
        + "nombreCarrera = ?, duracion = ? "
        + "WHERE "
        + "idcarrera = ?";

    /* SQL to delete data */
    private static final String SQL_DELETE =
        "DELETE FROM carrera WHERE "
        + "idcarrera = ?";

    /**
     * Create a new record in Database.
     * @param bean   The Object to be inserted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void create(Carrera bean, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_INSERT);
            ps.setInt(1, bean.getIdcarrera());
            ps.setString(2, bean.getNombrecarrera());
            ps.setInt(3, bean.getDuracion());
            ps.executeUpdate();
        }finally {
            close(ps);
        }
    }

    /**
     * Retrive a record from Database.
     * @param beanKey   The PK Object to be retrived.
     * @param conn      JDBC Connection.
     * @exception       SQLException if something is wrong.
     */
    public Carrera load(CarreraKey key, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SQL_SELECT);
            ps.setInt(1, key.getIdcarrera());
            rs = ps.executeQuery();
            List results = getResults(rs);
            if (results.size() > 0)
                return (Carrera) results.get(0);
            else
                return null;
        }finally {
            close(rs);
            close(ps);
        }
    }

    /**
     * Update a record in Database.
     * @param bean   The Object to be saved.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void update(Carrera bean, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_UPDATE);
            ps.setString(1, bean.getNombrecarrera());
            ps.setInt(2, bean.getDuracion());
            ps.setInt(3, bean.getIdcarrera());
            ps.executeUpdate();
        }finally {
            close(ps);
        }
    }

    /**
     * Create a new record in Database.
     * @param bean   The PK Object to be deleted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void delete(CarreraKey key, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_DELETE);
            ps.setInt(1, key.getIdcarrera());
            ps.executeUpdate();
        }finally {
            close(ps);
        }
    }
    
    /**
     * Populate the ResultSet.
     * @param rs     The ResultSet.
     * @return       The Object to retrieve from DB.
     * @exception    SQLException if something is wrong.
     */
    protected List<Carrera> getResults(ResultSet rs) throws SQLException {
        List results = new ArrayList<Carrera>();
        while (rs.next()) {
            Carrera bean = new Carrera();
            bean.setIdcarrera(rs.getInt("idcarrera"));
            bean.setNombrecarrera(rs.getString("nombreCarrera"));
            bean.setDuracion(rs.getInt("duracion"));
            results.add(bean);
        }
        return results;
    }

    /**
     * Close JDBC Statement.
     * @param stmt  Statement to be closed.
     */
    protected void close(Statement stmt) {
        if (stmt != null) {
            try {
                stmt.close();
            }catch(SQLException e){}
        }
    }

    /**
     * Close JDBC ResultSet.
     * @param rs  ResultSet to be closed.
     */
    protected void close(ResultSet rs) {
        if (rs != null) {
            try {
                rs.close();
            }catch(SQLException e){}
        }
    }
}