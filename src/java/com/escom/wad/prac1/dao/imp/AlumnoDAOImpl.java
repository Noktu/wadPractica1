/*
 * This java source file is generated by DAO4J v1.19
 * Generated on Tue Sep 16 16:53:21 CDT 2014
 * For more information, please contact b-i-d@163.com
 * Please check http://sourceforge.net/projects/dao4j/ for the latest version.
 */

package com.escom.wad.prac1.dao.imp;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.SQLException;
import java.sql.Types;
import java.util.List;
import java.util.ArrayList;
import com.escom.wad.prac1.dto.Alumno;
import com.escom.wad.prac1.dto.AlumnoKey;
import com.escom.wad.prac1.dao.AlumnoDAO;

/**
 * This class provides methods to populate DB Table of alumno
 */
public class AlumnoDAOImpl implements AlumnoDAO {
    /* SQL to insert data */
    private static final String SQL_INSERT =
        "INSERT INTO alumno ("
        + "boleta, nombreAlumno, paternoAlumno, maternoAlumno, fechaNacimiento, calle, colonia, "
        + "numero, codigoPostal, sexo, correo, idcarrera"
        + ") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

    /* SQL to select data */
    private static final String SQL_SELECT =
        "SELECT "
        + "boleta, nombreAlumno, paternoAlumno, maternoAlumno, fechaNacimiento, calle, colonia, "
        + "numero, codigoPostal, sexo, correo, idcarrera "
        + "FROM alumno WHERE "
        + "boleta = ?";

    /* SQL to update data */
    private static final String SQL_UPDATE =
        "UPDATE alumno SET "
        + "nombreAlumno = ?, paternoAlumno = ?, maternoAlumno = ?, fechaNacimiento = ?, calle = ?, colonia = ?, numero = ?,  "
        + "codigoPostal = ?, sexo = ?, correo = ?, idcarrera = ? "
        + "WHERE "
        + "boleta = ?";

    /* SQL to delete data */
    private static final String SQL_DELETE =
        "DELETE FROM alumno WHERE "
        + "boleta = ?";

    /**
     * Create a new record in Database.
     * @param bean   The Object to be inserted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void create(Alumno bean, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_INSERT);
            ps.setString(1, bean.getBoleta());
            ps.setString(2, bean.getNombrealumno());
            ps.setString(3, bean.getPaternoalumno());
            ps.setString(4, bean.getMaternoalumno());
            if (bean.getFechanacimiento() != null)
                ps.setDate(5, new java.sql.Date(bean.getFechanacimiento().getTime()));
            else
                ps.setNull(5, Types.DATE);
            ps.setString(6, bean.getCalle());
            ps.setString(7, bean.getColonia());
            ps.setInt(8, bean.getNumero());
            ps.setLong(9, bean.getCodigopostal());
            ps.setString(10, bean.getSexo());
            ps.setString(11, bean.getCorreo());
            ps.setInt(12, bean.getIdcarrera());
            ps.executeUpdate();
        }finally {
            close(ps);
        }
    }

    /**
     * Retrive a record from Database.
     * @param beanKey   The PK Object to be retrived.
     * @param conn      JDBC Connection.
     * @exception       SQLException if something is wrong.
     */
    public Alumno load(AlumnoKey key, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SQL_SELECT);
            ps.setString(1, key.getBoleta());
            rs = ps.executeQuery();
            List results = getResults(rs);
            if (results.size() > 0)
                return (Alumno) results.get(0);
            else
                return null;
        }finally {
            close(rs);
            close(ps);
        }
    }

    /**
     * Update a record in Database.
     * @param bean   The Object to be saved.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void update(Alumno bean, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_UPDATE);
            ps.setString(1, bean.getNombrealumno());
            ps.setString(2, bean.getPaternoalumno());
            ps.setString(3, bean.getMaternoalumno());
            if (bean.getFechanacimiento() != null)
                ps.setDate(4, new java.sql.Date(bean.getFechanacimiento().getTime()));
            else
                ps.setNull(4, Types.DATE);
            ps.setString(5, bean.getCalle());
            ps.setString(6, bean.getColonia());
            ps.setInt(7, bean.getNumero());
            ps.setLong(8, bean.getCodigopostal());
            ps.setString(9, bean.getSexo());
            ps.setString(10, bean.getCorreo());
            ps.setInt(11, bean.getIdcarrera());
            ps.setString(12, bean.getBoleta());
            ps.executeUpdate();
        }finally {
            close(ps);
        }
    }

    /**
     * Create a new record in Database.
     * @param bean   The PK Object to be deleted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void delete(AlumnoKey key, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_DELETE);
            ps.setString(1, key.getBoleta());
            ps.executeUpdate();
        }finally {
            close(ps);
        }
    }
    
    /**
     * Populate the ResultSet.
     * @param rs     The ResultSet.
     * @return       The Object to retrieve from DB.
     * @exception    SQLException if something is wrong.
     */
    protected List<Alumno> getResults(ResultSet rs) throws SQLException {
        List results = new ArrayList<Alumno>();
        while (rs.next()) {
            Alumno bean = new Alumno();
            bean.setBoleta(rs.getString("boleta"));
            bean.setNombrealumno(rs.getString("nombreAlumno"));
            bean.setPaternoalumno(rs.getString("paternoAlumno"));
            bean.setMaternoalumno(rs.getString("maternoAlumno"));
            bean.setFechanacimiento(rs.getDate("fechaNacimiento"));
            bean.setCalle(rs.getString("calle"));
            bean.setColonia(rs.getString("colonia"));
            bean.setNumero(rs.getInt("numero"));
            bean.setCodigopostal(rs.getLong("codigoPostal"));
            bean.setSexo(rs.getString("sexo"));
            bean.setCorreo(rs.getString("correo"));
            bean.setIdcarrera(rs.getInt("idcarrera"));
            results.add(bean);
        }
        return results;
    }

    /**
     * Close JDBC Statement.
     * @param stmt  Statement to be closed.
     */
    protected void close(Statement stmt) {
        if (stmt != null) {
            try {
                stmt.close();
            }catch(SQLException e){}
        }
    }

    /**
     * Close JDBC ResultSet.
     * @param rs  ResultSet to be closed.
     */
    protected void close(ResultSet rs) {
        if (rs != null) {
            try {
                rs.close();
            }catch(SQLException e){}
        }
    }
}